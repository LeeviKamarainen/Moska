
if (document.readyState !== "loading") {
    initializeCode();
    console.log('Loading!')
  } else {
    document.addEventListener("DOMContentLoaded", function () {
      initializeCode();
    });
  }
  
  function initializeCode() {
    const form = document.getElementById("add-card-form");

    console.log("Code initialized!")
    fetch("./example_state.json") 
      .then((response) => response.json())
      .then((json) => updateState(json));
    form.addEventListener("submit", (event) => {
      event.preventDefault();
    
      const cardType = document.getElementById("card-type").value;
      const cardNumber = document.getElementById("card-number").value;
    
      console.log("Input 1:", cardType);
      console.log("Input 2:", cardNumber);
    
      //generateCard(cardType,cardNumber)
    });

    // Add click listener to the document:
    document.body.onclick = function(e){
      if(e.target.className && e.target.className.indexOf('card')!=-1) {
        if(e.target.hasAttribute('selected')==true) {
          e.target.removeAttribute('selected')
        } else {
        e.target.setAttribute('selected',1)
        console.log(e.target.getAttribute('card-type'))
        }
      }
   }

  }


  function parseCard(cardString) {
    //This string parses given card string in to valid img src:
    const splitString = cardString.split(/(\d+)/);
    let cardName;
    if(splitString[0]=="H"){
    cardName = "hearts";
    }
    else if(splitString[0]=="C") {
      cardName = "clubs";
    }
    else if(splitString[0]=="S") {
      cardName = "spades";
    }
    else if(splitString[0]=="D") {
      cardName = "diamonds"
    }

    let cardNumber = splitString[1];
    let parsedString = cardNumber+"_of_"+cardName;
    let imgSrc = "/images/cards/"+parsedString+".png";
    return imgSrc;
  }


  function updateState(stateJson) {
    console.log(stateJson)
    let botIndex = 0;
    for (let playerIndex = 0; playerIndex < stateJson.players.length; playerIndex++) {
    //Splitting the players name by first numeric character
    let playerName = stateJson.players[playerIndex].name.split(/(\d+)/); 
    let cardContainer;
    console.log(playerName)
    if(playerName[0]!="NNEV"){ // Player is human:
      cardContainer = document.getElementById("bottom");
      cardContainer.innerHTML = stateJson.players[playerIndex].name;
    } else { // If the player is a bot:
      switch (botIndex) {
        case 0: {
          cardContainer = document.getElementById("left");
          cardContainer.innerHTML = stateJson.players[playerIndex].name;
          break;
        }
        case 1: {
          console.log("HERE")
          cardContainer = document.getElementById("top");
          cardContainer.innerHTML = stateJson.players[playerIndex].name;
          break;
        }
        case 2: {
          cardContainer = document.getElementById("right");
          cardContainer.innerHTML = stateJson.players[playerIndex].name;
          break;
        }
      }
      console.log(botIndex)
      botIndex = botIndex + 1;
    }
    
    // Add target attribute to the target players div:
    if(stateJson.players[playerIndex].name == stateJson.target) {
      cardContainer.setAttribute("target",1);
    }

    // Get the card container element

    // Selecting current indeces player:
    let playerState = stateJson.players[playerIndex];
    console.log(playerState)

    for (let index = 0; index < playerState.cards.length; index++) { // Loop through the cards:

      let cardString = playerState.cards[index];
      let parsedString = parseCard(cardString)

      // Create new card div
      const card = document.createElement("div");
      card.classList.add("card");

      // Create new image element for the card
      const cardImage = document.createElement("img");
      cardImage.src = parsedString;
      cardImage.className = "card";
      cardImage.setAttribute('card-type',cardString);

      // Append the image, heading, and paragraph elements to the card element
      card.appendChild(cardImage);

      // Append the card element to the card container
      cardContainer.appendChild(card);
    }
    
  }
  }