
if (document.readyState !== "loading") {
    initializeCode();
    console.log('Loading!')
  } else {
    document.addEventListener("DOMContentLoaded", function () {
      initializeCode();
    });
  }
  
  async function initializeCode() {
    const playCardsButton = document.getElementById("play-fall-hand");
    const playCardsArray = Object.create(null);
    console.log("Code initialized!")
    const res = await fetch("./example_state.json");
    let stateJson = await res.json();
    updateState(stateJson)

    // Add click listener to the document:
    document.body.onclick = function(e){
      if(e.target.className && e.target.className.indexOf('card')!=-1 && e.target.getAttribute("parentcontainer") == "bottom") {
        console.log(e.target)
        if(e.target.hasAttribute('selected')==true) {
          e.target.removeAttribute('selected')
          delete playCardsArray[e.target.getAttribute('card-type')];
        } else {
        e.target.setAttribute('selected',1)
        console.log(e.target.getAttribute('card-type'))
        playCardsArray[e.target.getAttribute('card-type')] = 1;
        }
      }
   }

   playCardsButton.addEventListener("click", function(){
    stateJson.action = "PlayFallFromHand"
    playCards(stateJson)
   });
  

  }


function playCards(stateJson) {
  // Find player name:
  let humanName;
  for (let playerIndex = 0; playerIndex < stateJson.players.length; playerIndex++) {
    //Splitting the players name by first numeric character
    let playerName = stateJson.players[playerIndex].name.split(/(\d+)/); 
    if(playerName[0]!="NNEV"){ // Player is human:
      humanName = stateJson.players[playerIndex].name;
     }
  }

  //Case when human plays :
  if(stateJson.action == "PlayFallFromHand") {
    let humanDeck = document.getElementById('bottom')
    let board = document.getElementById('middle')
    humanDeck.setAttribute('activated',1)
    board.setAttribute('activated',1)
  }

  // Case when human is the target:
  if(stateJson.target == humanName) {

  }

}


  function parseCard(cardString) {
    //This string parses given card string in to valid img src:
    const splitString = cardString.split(/(\d+)/);
    let cardName;
    if(splitString[0]=="H"){
    cardName = "hearts";
    }
    else if(splitString[0]=="C") {
      cardName = "clubs";
    }
    else if(splitString[0]=="S") {
      cardName = "spades";
    }
    else if(splitString[0]=="D") {
      cardName = "diamonds"
    }

    let cardNumber = splitString[1];
    let parsedString = cardNumber+"_of_"+cardName;
    let imgSrc = "/images/cards/"+parsedString+".png";
    return imgSrc;
  }


  function updateState(stateJson) {
    console.log(stateJson)
    let botIndex = 0;

    // Rendering players cards:
    for (let playerIndex = 0; playerIndex < stateJson.players.length; playerIndex++) {
    //Splitting the players name by first numeric character
    let playerName = stateJson.players[playerIndex].name.split(/(\d+)/); 
    let containerName;
    let cardContainer;
    if(playerName[0]!="NNEV"){ // Player is human:
      containerName = "bottom";
    } else { // If the player is a bot:
      switch (botIndex) {
        case 0: {
          containerName = "left";
          break;
        }
        case 1: {
          containerName = "top";
          break;
        }
        case 2: {
          containerName = "right";
          break;
        }
      }
      console.log(botIndex)
      botIndex = botIndex + 1;
    }
    cardContainer = document.getElementById(containerName);
    cardContainer.innerHTML = stateJson.players[playerIndex].name;
    // Add target attribute to the target players div:
    if(stateJson.players[playerIndex].name == stateJson.target) {
      cardContainer.setAttribute("target",1);
    }

    if(stateJson.players[playerIndex].name == stateJson.initiator) {
      cardContainer.setAttribute("initiator",1);
    }

    // Get the card container element

    // Selecting current indeces player:
    let playerState = stateJson.players[playerIndex];
    console.log(playerState)

    for (let index = 0; index < playerState.cards.length; index++) { // Loop through the cards:

      let cardString = playerState.cards[index];
      let parsedString = parseCard(cardString)

      // Create new card div
      const card = document.createElement("div");
      card.classList.add("card");

      // Create new image element for the card
      const cardImage = document.createElement("img");
      cardImage.src = parsedString;
      cardImage.className = "card";
      
      cardImage.setAttribute('parentContainer',containerName);
      cardImage.setAttribute('card-type',cardString);

      // Append the image, heading, and paragraph elements to the card element
      card.appendChild(cardImage);

      // Append the card element to the card container
      cardContainer.appendChild(card);
    }
    
  }

  // Rendering cards to kill:
  const boardContainer = document.getElementById("middle");
  for (let index = 0; index < stateJson.cards_to_kill.length; index++) {
    
    let cardString = stateJson.cards_to_kill[index];
    let parsedString = parseCard(cardString)

    // Create new card div
    const card = document.createElement("div");
    card.classList.add("card");

    // Create new image element for the card
    const cardImage = document.createElement("img");
    cardImage.src = parsedString;
    cardImage.className = "card";
    cardImage.setAttribute('card-type',cardString);

    // Append the image, heading, and paragraph elements to the card element
    card.appendChild(cardImage);

    // Append the card element to the card container
    boardContainer.appendChild(card);
    
  }

  // Rendering amount of cards left in the deck and the trump card:
  const deckContainer = document.getElementById("deck");
  // Create new card div
  const card = document.createElement("div");
  const card2 = document.createElement("div");
  card.classList.add("card");
  card2.classList.add("card");
  // Create new image element for the card
  const cardImage = document.createElement("img");
  const cardImage2 = document.createElement("img");
  cardImage.src = "/images/cards/card_back.png";
  cardImage.className = "card";
  cardImage.setAttribute('card-type',"card_back");

  let cardString = stateJson.trump_card;
  let parsedCard = parseCard(cardString);
  cardImage2.src = parsedCard;
  cardImage2.className = "card";
  cardImage2.setAttribute('card-type',"card_back");
  

  // Append the image, heading, and paragraph elements to the card element
  card.appendChild(cardImage);
  card2.appendChild(cardImage2);

  // Append the card elements to the card container
  const amountLeft = document.createElement("p");
  amountLeft.className = "amount-left";
  amountLeft.innerHTML = "Cards left: "+stateJson.deck_left;
  deckContainer.appendChild(card);
  deckContainer.appendChild(card2);
  deckContainer.appendChild(amountLeft);


  }